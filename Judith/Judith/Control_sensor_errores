char entrada[8]; //String d'entrada.
int posicion;    //Posició del string.
int pin;         //Variable utilizada en les operacions 'E' i 'S'.

void setup(){
  Serial.begin(9600);
}

void loop(){
  if (lectura_array()==1) {
    comandas();
  }
 delay(2000);
}

int lectura_array() { 
  int r=0;
  
  if(Serial.available()>0) { 
    r=1;
    for (posicion=0; posicion<=8; posicion++)  {
    	entrada[posicion]=Serial.read();  
    }
  posicion=0;
  }
  return r; 
}

void comandas() {

  switch (entrada[1]){
    
    	case 'E':
    		comandaE();
		break;
    
    	case 'S':
    		comandaS();
		break;

		default:
			
		break;
  }
}

void comandaE() {  
  int i;
  int pin;
  bool ValorEntrada;	
  
  pin = (entrada[2]-48)*10+(entrada[3]-48);           
  pinMode(pin, INPUT);                   
  ValorEntrada=digitalRead(pin); 
  
   if (entrada[4]!='Z') {           // ERROR_protocol: la 'Z' no està en la posició correcta.
       	Serial.print("AE1");        // Missatge ERROR 1 per la operació 'E'.
        Serial.print(ValorEntrada);
        Serial.print("Z\n");
   }
  
   else if ((entrada[1])=='A' || (entrada[2])=='A' || (entrada[3])=='A') // ERROR_protocol: es rep una segona 'A' abans 'Z' 
        Serial.println (" ");      // es descarten bytes rebuts i no es respon res.
 
   else {          
		Serial.print("AE0");         // Missatge de OK. 
		Serial.print(ValorEntrada);
		Serial.print("Z\n");
   }
}

void comandaS() {
  int pin;
  bool ValorSortida;
  
   if (entrada[5]!='Z') {           // ERROR_protocol: la 'Z' no està en la posició correcta.
       	Serial.print("AS1Z\n");        // Missatge ERROR 1 per la operació 'S'.;
   }
  
   else if ((entrada[1])=='A' || (entrada[2])=='A' || (entrada[3])=='A' || (entrada[4])=='A') // ERROR_protocol: es rep una segona 'A' abans 'Z' 
        Serial.println (" ");      // es descarten bytes rebuts i no es respon res.
  
   else {
     	ValorSortida = (entrada[4]-48);
  		pin = (entrada[2]-48)*10+(entrada[3]-48);           
  		Serial.print("AS0Z\n");         // Missatge de OK.
   }
}

